import discord
from discord.ext import commands
import yt_dlp as youtube_dl
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn -filter:a "volume=0.8"'
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
intents = discord.Intents.default()
intents.voice_states = True
intents.message_content = True

bot = commands.Bot(command_prefix="!", intents=intents)
queues = []
current_song = None
loop = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è YouTube DL
ytdl_format_options = {
    'format': 'bestaudio/best',
    'noplaylist': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=False))
        
        if 'entries' in data:
            return [cls(discord.FFmpegPCMAudio(entry['url'], **FFMPEG_OPTIONS), data=entry) 
                   for entry in data['entries'] if entry]
        else:
            return [cls(discord.FFmpegPCMAudio(data['url'], **FFMPEG_OPTIONS), data=data)]

async def connect_to_voice(ctx):
    try:
        if not ctx.author.voice:
            await ctx.send("‚ùå –í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
            return None
        
        if ctx.voice_client:
            if ctx.voice_client.channel != ctx.author.voice.channel:
                await ctx.voice_client.move_to(ctx.author.voice.channel)
        else:
            await ctx.author.voice.channel.connect(timeout=60.0, reconnect=True)
        
        return ctx.voice_client
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
        return None

async def play_next(ctx):
    global current_song, loop
    
    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ –∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å
    if not queues and loop and current_song:
        queues.append(current_song)
    
    # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—É—Å—Ç–∞ (–Ω–µ—Ç –ø–æ–≤—Ç–æ—Ä–∞ –∏–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏), –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è
    if not queues:
        current_song = None  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–µ—Å–Ω—é
        if ctx.voice_client and ctx.voice_client.is_connected():
            await ctx.voice_client.disconnect(force=True)
        return
    
    try:
        current_song = queues.pop(0)

        def after_playing(error):
            if error:
                logging.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {error}")
            if ctx.voice_client and ctx.voice_client.is_connected():
                fut = asyncio.run_coroutine_threadsafe(play_next(ctx), bot.loop)
                try:
                    fut.result()
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ after_playing: {e}")
        
        if not ctx.voice_client or not ctx.voice_client.is_connected():
            return
        
        ctx.voice_client.play(current_song, after=after_playing)
        await ctx.send(f"üé∂ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: **{current_song.title}**")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ play_next: {e}")
        await ctx.send("üö´ –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")

@bot.event
async def on_ready():
    logging.info(f'–ë–æ—Ç {bot.user.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')

@bot.command()
async def play(ctx, *, query):
    vc = await connect_to_voice(ctx)
    if not vc:
        return
    
    async with ctx.typing():
        try:
            players = await YTDLSource.from_url(query)
            if not players:
                return await ctx.send("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            queues.extend(players)
            
            if not vc.is_playing():
                await play_next(ctx)
            else:
                await ctx.send(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(players)} —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å")
        
        except Exception as e:
            await ctx.send(f"üö´ –û—à–∏–±–∫–∞: {str(e)}")

@bot.command()
async def skip(ctx):
    if ctx.voice_client and ctx.voice_client.is_playing():
        ctx.voice_client.stop()
        await ctx.send("‚è© –¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω")

@bot.command()
async def stop(ctx):
    global current_song, loop
    current_song = None
    loop = False
    queues.clear()
    
    if ctx.voice_client:
        ctx.voice_client.stop()  # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        await ctx.voice_client.disconnect()
    
    await ctx.send("‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

@bot.command()
async def queue(ctx):
    if not queues and not current_song:
        return await ctx.send("üì≠ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!")
    
    items = []
    if current_song:
        items.append(f"–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: {current_song.title}")
    
    for i, song in enumerate(queues[:10]):
        items.append(f"{i+1}. {song.title}")
    
    await ctx.send("üéß –û—á–µ—Ä–µ–¥—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:\n" + "\n".join(items))

@bot.command(name="loop", aliases=["repeat"])
async def toggle_loop(ctx):
    global loop
    loop = not loop
    await ctx.send(f"üîÇ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ {'–≤–∫–ª—é—á–µ–Ω' if loop else '–≤—ã–∫–ª—é—á–µ–Ω'}")

bot.run(TOKEN)
